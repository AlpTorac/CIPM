import org.eclipse.emf.ecore.util.EcoreUtil

import edu.kit.ipd.sdq.commons.util.org.eclipse.emf.common.util.URIUtil

import org.emftext.language.java.members.Method
import org.emftext.language.java.members.Field
import org.emftext.language.java.classifiers.Class
import org.emftext.language.java.containers.ContainersPackage
import org.emftext.language.java.types.ClassifierReference
import org.emftext.language.java.types.NamespaceClassifierReference
import org.emftext.language.java.modifiers.Public
import org.emftext.language.java.modifiers.Private
import org.emftext.language.java.modifiers.Protected

import org.palladiosimulator.pcm.repository.OperationSignature
import org.palladiosimulator.pcm.repository.RepositoryFactory
import org.palladiosimulator.pcm.repository.Repository
import org.palladiosimulator.pcm.repository.DataType
import org.palladiosimulator.pcm.repository.RepositoryPackage
import org.palladiosimulator.pcm.system.SystemPackage
import org.palladiosimulator.pcm.repository.OperationInterface
import org.palladiosimulator.pcm.repository.CompositeDataType
import org.palladiosimulator.pcm.repository.CollectionDataType
import org.palladiosimulator.pcm.core.entity.Entity

import tools.vitruv.applications.pcmjava.pojotransformations.java2pcm.Java2PcmUserSelection

import tools.vitruv.framework.^correspondence.CorrespondenceModelUtil
import tools.vitruv.applications.pcmjava.util.java2pcm.TypeReferenceCorrespondenceHelper
import tools.vitruv.framework.userinteraction.UserInteractionOptions.WindowModality

import com.google.common.collect.Lists
//import com.google.common.collect.Sets
import java.util.HashMap

import static extension tools.vitruv.applications.util.temporary.java.JavaMemberAndParameterUtil.hasSameSignature
import static extension edu.kit.ipd.sdq.commons.util.java.lang.IterableUtil.claimNotMany
import static tools.vitruv.applications.util.temporary.java.JavaTypeUtil.*
import static tools.vitruv.applications.util.temporary.java.JavaContainerAndClassifierUtil.*
import static tools.vitruv.domains.java.util.JavaPersistenceHelper.*
import org.eclipse.jdt.internal.formatter.old.CodeFormatter

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm


reactions: packageAndClassifiers
in reaction to changes in Java
execute actions in PCM


//empty implementation for add and remove imports
reaction AddImportReaction {
	after element created and inserted in java::JavaRoot[imports]
	call {}
}

reaction RemoveImportReaction {
	after element deleted and removed from java::JavaRoot[imports]
	call {}
}


//Create Interface Method:
reaction InterfaceMethodCreated {
	after element java::InterfaceMethod inserted in java::Interface[members] 
	call createPCMSignature(newValue)
}

routine createPCMSignature(java::InterfaceMethod interfaceMethod) {
	match {
		val pcmInterface = retrieve pcm::OperationInterface corresponding to interfaceMethod.containingConcreteClassifier
	}
	action {
		val operationSignature = create pcm::OperationSignature and initialize {
			operationSignature.entityName = interfaceMethod.name
			operationSignature.interface__OperationSignature = pcmInterface
		}
		
		update pcmInterface {
			pcmInterface.signatures__OperationInterface += operationSignature
		}
		
		add correspondence between operationSignature and interfaceMethod
	}
}


//Create Class Method:
reaction ClassMethodCreated {
	after element java::ClassMethod inserted in java::Class[members]
	call createSeffFromImplementingInterfaces(newValue, affectedEObject)
}

routine createSeffFromImplementingInterfaces(java::ClassMethod classMethod, java::Class javaClass) {
	action {
		call {
			val implementingInterfaces = findImplementingInterfacesFromTypeRefs(javaClass.implements)
			for (implementingInterface : implementingInterfaces) {
				createSeffFromImplementingInterface(classMethod, javaClass, implementingInterface)
			}
		}
	}
}

routine createSeffFromImplementingInterface(java::ClassMethod classMethod, java::Class javaClass, java::Interface javaInterface) {
	match {
		val operationInterface = retrieve pcm::OperationInterface corresponding to javaInterface
	} 
	action {
		call {
			val methods = javaInterface.methods.filter[hasSameSignature(classMethod)]
			for (method : methods) {
				createSEFF(method, javaClass, classMethod)
			}
		}
	}
}

routine createSEFF(java::Method javaMethod, java::Class javaClass, java::ClassMethod classMethod) {
	match {
		val operationSignature = retrieve pcm::OperationSignature corresponding to javaMethod
		val basicComponent = retrieve pcm::BasicComponent corresponding to javaClass
	}
	action {
		val rdseff = create pcm::ResourceDemandingSEFF and initialize {
			rdseff.describedService__SEFF = operationSignature
			rdseff.basicComponent_ServiceEffectSpecification = basicComponent
		}
		add correspondence between classMethod and rdseff
		
		update basicComponent {
			basicComponent.serviceEffectSpecifications__BasicComponent += rdseff
		}
	}
}

//Remove Interface Method
reaction RemoveInterfaceMethodEvent {
	after element java::InterfaceMethod removed from java::Interface[members] 
	call removedInterfaceMethodEvent(oldValue)
} 

routine removedInterfaceMethodEvent(java::InterfaceMethod interfaceMethod) {
	match {
		val operationSignature = retrieve pcm::OperationSignature corresponding to interfaceMethod
		//val opSig = retrieve pcm::OperationSignature corresponding to interfaceMethod
	}
	action {
		//'remove correspondence between' is not needed, because 'delete' automatically removes the object and its correspondences 
		//remove correspondence between opSig and interfaceMethod
		
		//deprecated. Use 'delete' instead.
		//update opSig {
			//interfaceMethod.eResource().load(new HashMap())
			//Does not work appropriate. 
			//The OperatureSignature will be removed from repository, but not the correspondence, 
			//because Ecore.equals() returns false.
			//EcoreUtil.^remove(opSig)
		//}
		
		//Should the correspoding SEFFs still exist?
		//Should the references to the removed OperationSignature in all rdseff.describedService__SEFF also be removed?
		delete operationSignature
	}
}


//Remove Class Method
reaction RemoveClassMethodEvent {
	after element java::ClassMethod removed from java::Class[members]
	call removedClassMethodEvent(oldValue)
} 

routine removedClassMethodEvent(java::ClassMethod classMethod) {
	match {
		//val operationSignature = retrieve pcm::OperationSignature corresponding to classMethod
		val seff = retrieve pcm::ResourceDemandingSEFF corresponding to classMethod
	}
	action {
		//remove correspondence between opSig and classMethod
		//update opSig {
		//	EcoreUtil.^remove(opSig)
		//}
		delete seff
	}
}

//Create Class
reaction ClassCreated {
	after element java::Class inserted in java::CompilationUnit[classifiers]
	call {
		//CorrespondenceModelUtil.getCorrespondingEObjectsByType(correspondenceModel, javaPackage, typeof(Repository))
		val javaPackage = getContainingPackageFromCorrespondenceModel(newValue,
			correspondenceModel)
		classMapping(newValue, affectedEObject, javaPackage)
	}
}

/**
 * Creates Datatype if class was in datatypes package created or checks if there can be a correspondence and if 
 * not create a new pcm element.
 */
routine classMapping(java::Class javaClass, java::CompilationUnit compilationUnit, java::Package javaPackage) {
	//match {
	//	val pcmRepository = retrieve pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
	//	val datatypesPackage = retrieve java::Package corresponding to pcmRepository tagged with "datatypes" 
	//}
	action {
		call {
			
			//Are DataTypes needed for CIPM?
			//if (javaPackage !== null && javaPackage.name == datatypesPackage.name) {
			//	createDataType(javaClass, compilationUnit)
			//} else {
				checkSystemAndComponent(javaPackage, javaClass)
				createElement(javaClass, javaPackage, compilationUnit)
			//}
			
		}
	}
}


/**
 * Check if package has a correspondence with a component or system. 
 * If there is one create correspondence between component or system and the given class, as well as the compilation unit if not already exists
 */
routine checkSystemAndComponent(java::Package javaPackage, java::Class javaClass) {
	match {
		val componentOrSystem = retrieve pcm::InterfaceProvidingRequiringEntity corresponding to javaPackage  
		val correspondenceToCompilationUnit = retrieve optional pcm::RepositoryComponent corresponding to javaClass.containingCompilationUnit
			with correspondenceToCompilationUnit.entityName == componentOrSystem.entityName
	}
	action {
		add correspondence between componentOrSystem and javaClass
		call {
			if (!correspondenceToCompilationUnit.isPresent) {
				addCorrespondenceBetweenPcmComponentOrSystemAndJavaCompilationUnit(componentOrSystem, javaClass.containingCompilationUnit)
			}
			//TODO: Make sure, the correspondence between the componentOrSystem and javaClass.containingCompilationUnit does not exist yet
			//val correspondencesForCompilationUnit = Lists.javaClass.containingCompilationUnit
			//val correspondingCompilationUnit = correspondenceModel.getCorrespondences((new HashList<>).^add())
			
			//pcmRepository.dataTypes__Repository.filter(CompositeDataType)
			//	.filter[entityName.toFirstUpper == javaClass.name.toFirstUpper || javaClass.name === null && entityName == "aName"].claimNotMany
			//if (foundCompositeDataType === null)
			//val correspondingCompilationUnit = correspondenceModel.ge
			
		}
	}
}


/**
 * Creates a new architectural element and add correspondence.
 */
routine createElement(java::Class javaClass, java::Package javaPackage, java::CompilationUnit compilationUnit) {
	match {
		require absence of pcm::DataType corresponding to javaClass
		//require absence of pcm::InterfaceProvidingRequiringEntity corresponding to javaClass 
		
		//val pcmRepository = retrieve pcm::Repository corresponding to RepositoryPackage.Literals.REPOSITORY					
		//val javaRootPackage = retrieve java::Package corresponding to pcmRepository tagged with "package_root"
		
		//val pcmRepository = retrieve pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE//javaPackage
		//val javaRootPackage = retrieve java::Package corresponding to pcmRepository tagged with "package_root" 
		
		
	}
	action {
		call { 
			//val pcmRepository = correspondenceModel.getAllEObjectsOfTypeInCorrespondences(typeof(Repository))
			//val javaRootPackage = correspondenceModel.getCorrespondingEObjects(pcmRepository.toList)
			createArchitecturalElement(javaPackage, javaClass.name, compilationUnit.namespaces.head)			
			//checkSystemAndComponent(javaPackage, javaClass)
		}
	}
}


/**
 * User can select if he wants to create BasicComponent, CompositeComponent, System or do nothing.
 */
routine createArchitecturalElement(java::Package javaPackage, String name, String rootPackageName) {
	//match {
	//	retrieve pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
	//}
	action {
		call {
			val String userMsg = "A package, class or interface has been created. Please decide whether and which corresponding architectural element should be created"
			val String[] selections = #[Java2PcmUserSelection.SELECT_BASIC_COMPONENT.message,
				Java2PcmUserSelection.SELECT_COMPOSITE_COMPONENT.message,
				Java2PcmUserSelection.SELECT_SYSTEM.message,
				Java2PcmUserSelection.SELECT_NOTHING_DECIDE_LATER.message
			]
			val selected = userInteractor.singleSelectionDialogBuilder.message(userMsg).choices(selections)
				.windowModality(WindowModality.MODAL).startInteraction()
			switch(selected) {
				case Java2PcmUserSelection.SELECT_BASIC_COMPONENT.selection: 
					createBasicComponent(javaPackage, name, rootPackageName) 
				case Java2PcmUserSelection.SELECT_COMPOSITE_COMPONENT.selection: 
					createCompositeComponent(javaPackage, name, rootPackageName)
				case Java2PcmUserSelection.SELECT_SYSTEM.selection: 
					createOrFindSystem(javaPackage, name)
			}
		}
	}
}



//Create Interface
reaction InterfaceCreated {
	after element java::Interface inserted in java::CompilationUnit[classifiers]
	call createOrFindPCMInterface(newValue, affectedEObject)
}

routine createOrFindPCMInterface(java::Interface javaInterface, java::CompilationUnit compilationUnit) {
	//match {
	//	val containingPackage = retrieve java::Package corresponding to ContainersPackage.Literals.PACKAGE
	//		with containingPackage.compilationUnits.map[namespacesAsString + '.' + name].contains(compilationUnit.namespacesAsString + '.' + compilationUnit.name)
	//	val pcmRepository = retrieve optional pcm::Repository corresponding to containingPackage tagged with "contracts"
	//	require absence of pcm::OperationInterface corresponding to javaInterface
	//}
	action {
		call {
			val containingPackage = getContainingPackageFromCorrespondenceModel(javaInterface, correspondenceModel)
			val pcmRepository = correspondenceModel.getAllEObjectsOfTypeInCorrespondences(typeof(Repository)).toList.get(0)
			//if(pcmRepository.isPresent) {
			//	createOrFindContractsInterface(javaInterface, compilationUnit, containingPackage, pcmRepository.get)
			//} else {
				createNonContractsInterface(javaInterface, compilationUnit, containingPackage)
			//}
		}
	}
}

routine createOrFindContractsInterface(java::Interface javaInterface, java::CompilationUnit compilationUnit, java::Package contractsPackage, pcm::Repository pcmRepository) {
	action {
		call {
			val pcmInterface = pcmRepository.interfaces__Repository.filter(OperationInterface).findFirst[entityName == javaInterface.name]
			if (pcmInterface === null) {
				createInterface(javaInterface, compilationUnit, contractsPackage)
			} else {
				addInterfaceCorrespondence(pcmInterface, javaInterface, compilationUnit)
			}
		}
	}
}


/**
 * User selects if interface should be created if interface was not created into contract package.
 */
routine createNonContractsInterface(java::Interface javaInterface, java::CompilationUnit compilationUnit, java::Package javaPackage) {
	action {
		call {
			val String userMsg = "The created interface is not in the contracts packages. Should an architectural interface be created for the interface " +
					javaInterface.name + " ?"
			val String[] selections = #[Java2PcmUserSelection.SELECT_CREATE_INTERFACE_NOT_IN_CONTRACTS.message,
				Java2PcmUserSelection.SELECT_DONT_CREATE_INTERFACE_NOT_IN_CONTRACTS.message
			]
			val selected = userInteractor.singleSelectionDialogBuilder.message(userMsg).choices(selections)
				.windowModality(WindowModality.MODAL).startInteraction()
			if (selected == Java2PcmUserSelection.SELECT_CREATE_INTERFACE_NOT_IN_CONTRACTS.selection) {
				createInterface(javaInterface, compilationUnit, javaPackage)
			}
		}
	}
}

routine createInterface(java::Interface javaInterface, java::CompilationUnit compilationUnit, java::Package javaPackage) {
	action {
		val pcmInterface = create pcm::OperationInterface and initialize {
			pcmInterface.entityName = javaInterface.name
		}
		call {
			val pcmRepository = correspondenceModel.getAllEObjectsOfTypeInCorrespondences(typeof(Repository)).toList.get(0)
			
			addInterfaceCorrespondence(pcmInterface, javaInterface, compilationUnit)
			updateRepositoryInterfaces(pcmInterface, pcmRepository)
		}
	}
}

routine addInterfaceCorrespondence(pcm::OperationInterface pcmInterface, java::Interface javaInterface, java::CompilationUnit compilationUnit) {
	match {
		require absence of pcm::Interface corresponding to javaInterface
	}
	action {
		add correspondence between pcmInterface and javaInterface
		add correspondence between pcmInterface and compilationUnit 
	}
}

routine updateRepositoryInterfaces(pcm::OperationInterface pcmInterface, pcm::Repository pcmRepository) {
	action {
		update pcmRepository {
			pcmRepository.interfaces__Repository += pcmInterface
		}
	}
}

//Remove Class
reaction RemoveClassEvent {
	after element java::Class removed from java::CompilationUnit[classifiers]
	call {
		//val javaPackage = getContainingPackageFromCorrespondenceModel(oldValue, correspondenceModel)
		removedClassEvent(oldValue)
	}

} 

routine removedClassEvent(java::Class clazz) {
	match {
		val pcmComponent = retrieve pcm::RepositoryComponent corresponding to clazz
	}
	action {
		delete pcmComponent
	}
}

//Remove Interface
reaction RemoveInterfaceEvent {
	after element java::Interface removed from java::CompilationUnit[classifiers]
	call {
		//val javaPackage = getContainingPackageFromCorrespondenceModel(oldValue, correspondenceModel)
		removedInterfaceEvent(oldValue)
	}
} 

routine removedInterfaceEvent(java::Interface interfaze) {
	match {
		val pcmComponent = retrieve pcm::RepositoryComponent corresponding to interfaze
	}
	action {
		delete pcmComponent
	}
}


///Create Package
reaction PackageCreated {
	after element java::Package inserted as root
	//This condition prevents another execution after automatically creating contracts and datatypes package.
	//The reaction is called because every package insert is a root insert. 
	//with newValue.name === null || (!newValue.name.contains("contracts") && !newValue.name.contains("datatypes"))
		
	call {
		createOrFindArchitecturalElement(newValue, getLastPackageName(newValue.name))
		//createOrFindRepository(newValue, newValue.name, "package_root")
		createPackageEClassCorrespondence(newValue) // IMPORTANT: Always call this last here!
	}
}

/**
 * Required to enable locating existing packages with missing correspondences when keeping more than two models consistent.
 */
routine createPackageEClassCorrespondence(java::Package jPackage) {
	match {
		val allPackages = retrieve many java::Package corresponding to jPackage.eClass
		check !allPackages.contains(jPackage)
	}
	action {
		add correspondence between jPackage and jPackage.eClass
	}
}

routine createOrFindArchitecturalElement(java::Package javaPackage, String containerName) {
	match {
		val containerPackage = retrieve optional java::Package corresponding to ContainersPackage.Literals.PACKAGE
			with containerPackage.name == containerName
		require absence of pcm::RepositoryComponent corresponding to javaPackage
	}
	action {
		call {
			val rootPackageName = getRootPackageName(javaPackage.name)
			if (containerPackage.isPresent) { // can actually be located if it exists:
				createOrFindArchitecturalElementInPackage(javaPackage, containerPackage.get, rootPackageName)
			} else { // cannot be located if it already exists, so just create it anyways:
				createArchitecturalElement(javaPackage, containerName, rootPackageName)
			}
		}
	}
}

routine createOrFindArchitecturalElementInPackage(java::Package javaPackage, java::Package containingPackage, String rootPackageName) {
	match {
		//val pcmRepository = retrieve pcm::Repository corresponding to containingPackage tagged with "package_root"
		require absence of pcm::RepositoryComponent corresponding to javaPackage
	}
	action {
		
		call {
			val pcmRepository = correspondenceModel.getAllEObjectsOfTypeInCorrespondences(typeof(Repository)).toList.get(0)
			val pcmComponentCandidate = pcmRepository.components__Repository.findFirst[entityName == javaPackage.name.toFirstUpper]
			if (pcmComponentCandidate === null) {
				createArchitecturalElement(javaPackage, containingPackage.name, rootPackageName)
			} else {
				addCorrespondenceAndUpdateRepository(pcmComponentCandidate, javaPackage, pcmRepository)
			}
		}
	}
}


routine createOrFindRepository(java::Package javaPackage, String packageName, String newTag) {
	match {
		require absence of pcm::Repository corresponding to javaPackage tagged with newTag
		require absence of pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
		//val foundRepository = retrieve optional pcm::Repository corresponding to RepositoryPackage.Literals.REPOSITORY
		//	with foundRepository.entityName.toFirstLower == packageName // PCM repositories can be both upper and lower case
	}
	action {
		call {
			val foundRepository = correspondenceModel.getAllEObjectsOfTypeInCorrespondences(typeof(Repository)).toList.get(0)
			//if (foundRepository.isPresent) {
				
				
				ensureFirstCaseUpperCaseRepositoryNaming(foundRepository, javaPackage)
				
				
				addRepositoryCorrespondence(foundRepository, javaPackage, newTag)
			
			
			//} else {
			//	createRepository(javaPackage, packageName, newTag)
			//}
		}
	}
}

routine ensureFirstCaseUpperCaseRepositoryNaming(pcm::Repository pcmRepository, java::Package javaPackage) {
	match {
		check pcmRepository.entityName == javaPackage.name
	}
	action {
		update pcmRepository {
			pcmRepository.entityName = javaPackage.name.toFirstUpper
		}
	}
}

routine addRepositoryCorrespondence(pcm::Repository pcmRepository, java::Package javaPackage, String newTag) {
	action {
		add correspondence between pcmRepository and ContainersPackage.Literals.PACKAGE
		add correspondence between pcmRepository and javaPackage tagged with newTag
	}
}

//TODO: don't create 'datatypes' and 'contracts' packages
routine createRepository(java::Package javaPackage, String packageName, String newTag) {
	action {
		update javaPackage {
			// If the package-info.java is not persisted, do it
			val packageUri = javaPackage.eResource.URI;
			if (!URIUtil.existsResourceAtUri(packageUri)) {
				val projectRelativeResourcePath = packageUri.segmentsList.tail.fold("", [a, b | a + "/" + b])
				persistProjectRelative(javaPackage, javaPackage, projectRelativeResourcePath)
			}
		}
		val pcmRepository = create pcm::Repository and initialize {
			pcmRepository.entityName = packageName.toFirstUpper
			persistProjectRelative(javaPackage, pcmRepository, "model/" + pcmRepository.entityName + ".repository")
		}
		
		add correspondence between pcmRepository and javaPackage 
			tagged with newTag
			
		call createJavaSubPackages(javaPackage)
		add correspondence between pcmRepository and ContainersPackage.Literals.PACKAGE
		add correspondence between pcmRepository and RepositoryPackage.Literals.REPOSITORY
	}
}

//TODO
//Remove Package
reaction RemovePackage {
	after element java::Package removed as root//java::Package removed from ... how can we access the list of the existing packages? from root?

	call {
		removedPackageRoutine(oldValue)
	}
}

routine removedPackageRoutine(java::Package javaPackage) {
	match {
		//val metaElement = retrieve optional java::Package corresponding to javaPackage
		val pcmComponent = retrieve pcm::RepositoryComponent corresponding to javaPackage
		
	}
	action {
		//call {
		//	if (metaElement.isPresent) {
		//		deleteCorrespondenceBetweenJavaPackageAndMetaElement(javaPackage, metaElement.get)
		//	}
		//}
		delete pcmComponent
		remove correspondence between javaPackage and ContainersPackage.Literals.PACKAGE
	}
	
}

routine deleteCorrespondenceBetweenJavaPackageAndMetaElement(java::Package javaPackage,  java::Package metaElement) {
	action {
		remove correspondence between javaPackage and metaElement
	}
}




//TypeReference
reaction TypeReferenceCreated {
	after element java::TypeReference inserted in java::Class[implements]
	with newValue instanceof NamespaceClassifierReference || newValue instanceof ClassifierReference
	call {
		createOperationProvidedRole(newValue)
	}
}

routine createOperationProvidedRole(java::TypeReference typeReference) {
	action {
		call {
			val javaClass = typeReference.eContainer as Class
			var javaInterfaceClassifier = getNormalizedClassifierFromTypeReference(typeReference)
			createOperationProvidedRoleFromTypeReference(javaInterfaceClassifier, javaClass, typeReference)
		}
	}
}

routine createOperationProvidedRoleFromTypeReference(java::Classifier classifierInterface, java::Class javaClass, java::TypeReference reference) {
	match {
		val opInterface = retrieve pcm::OperationInterface corresponding to classifierInterface
		val basicComponent = retrieve pcm::BasicComponent corresponding to javaClass
	}
	action {
		val operationProvidedRole = create pcm::OperationProvidedRole and initialize {
			operationProvidedRole.providedInterface__OperationProvidedRole = opInterface
			operationProvidedRole.providingEntity_ProvidedRole = basicComponent
			operationProvidedRole.entityName = basicComponent.entityName + "_provides_" + opInterface.entityName
		}
		add correspondence between operationProvidedRole and reference
	}
}


//TypeReference
reaction TypeReferenceRemoved {
	after element java::TypeReference removed from java::Class[implements]
	with oldValue instanceof NamespaceClassifierReference || oldValue instanceof ClassifierReference
	call {
		removeOperationProvidedRole(oldValue)	
	}
}

routine removeOperationProvidedRole(java::TypeReference typeReference) {
	match {
		val operationProvidedRole = retrieve pcm::OperationProvidedRole corresponding to typeReference
	}
	
	action {
		delete operationProvidedRole
	}
}

/*
routine removeOperationProvidedRole(java::TypeReference typeReference) {
	action {
		call {	
			val javaClass = typeReference.eContainer as Class
			var javaInterfaceClassifier = getNormalizedClassifierFromTypeReference(typeReference)
			removeOperationProvidedRoleFromTypeReference(javaInterfaceClassifier, javaClass, typeReference)
		}
	}
}

routine removeOperationProvidedRoleFromTypeReference(java::Classifier classifierInterface, java::Class javaClass, java::TypeReference reference) {
	match {
		val opInterface = retrieve pcm::OperationInterface corresponding to classifierInterface
		val basicComponent = retrieve pcm::BasicComponent corresponding to javaClass
	}
	action {
		val operationProvidedRole = create pcm::OperationProvidedRole and initialize {
			operationProvidedRole.providedInterface__OperationProvidedRole = opInterface
			operationProvidedRole.providingEntity_ProvidedRole = basicComponent
			operationProvidedRole.entityName = basicComponent.entityName + "_provides_" + opInterface.entityName
		}
		remove correspondence between operationProvidedRole and reference
	}
}
*/


//---------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------




routine createOrFindSystem(java::Package javaPackage, String name) {
	 match {
		require absence of pcm::System corresponding to javaPackage
		val foundSystem = retrieve optional pcm::System corresponding to SystemPackage.Literals.SYSTEM
			with foundSystem.entityName.toFirstLower == javaPackage.name // PCM systems can be both upper and lower case
	}
	action {
		call {
			if (foundSystem.isPresent) {
				addSystemCorrespondence(foundSystem.get, javaPackage)
			} else {
				createSystem(javaPackage, name)
			}
		}
	}
}

routine addSystemCorrespondence(pcm::System pcmSystem, java::Package javaPackage) {
	action {
		add correspondence between pcmSystem and javaPackage tagged with "root_system"
	}
}

routine createSystem(java::Package javaPackage, String name) {
	action {
		val pcmSystem = create pcm::System and initialize {
			pcmSystem.entityName = name
			persistProjectRelative(javaPackage, pcmSystem, "model/" + pcmSystem.entityName + ".system")
		}
		add correspondence between pcmSystem and javaPackage
		add correspondence between pcmSystem and SystemPackage.Literals.SYSTEM tagged with "root_system"
	}
}

routine createBasicComponent(java::Package javaPackage, String name, String rootPackageName) {
	action {
		val pcmBasicComponent = create pcm::BasicComponent and initialize {
			pcmBasicComponent.entityName = name
		}
		call {
			val pcmRepository = correspondenceModel.getAllEObjectsOfTypeInCorrespondences(typeof(Repository)).toList.get(0)
			addCorrespondenceAndUpdateRepository(pcmBasicComponent, javaPackage, pcmRepository)
		}
	}
}

routine createCompositeComponent(java::Package javaPackage, String name, String rootPackageName) {
	action {
		val pcmCompositeComponent = create pcm::CompositeComponent and initialize {
			pcmCompositeComponent.entityName = name
		}		
		call {
			val pcmRepository = correspondenceModel.getAllEObjectsOfTypeInCorrespondences(typeof(Repository)).toList.get(0)
			addCorrespondenceAndUpdateRepository(pcmCompositeComponent, javaPackage, pcmRepository)
		}
	}
}

/**
 * Adds correspondence between component and package if not already exists, and adds component into repository.
 */
routine addCorrespondenceAndUpdateRepository(pcm::RepositoryComponent pcmComponent, java::Package javaPackage, pcm::Repository pcmRepository) {
	match {
		val correspondingElement = retrieve optional pcm::RepositoryComponent corresponding to javaPackage
	}
	action {
		call {
			if(!correspondingElement.isPresent) {
				addCorrespondenceBetweenPcmComponentAndJavaPackage(pcmComponent, javaPackage)
			}
		}
		update pcmRepository {
			if(!pcmRepository.components__Repository.contains(pcmComponent)) {
				pcmRepository.components__Repository += pcmComponent
			}
		}

	}
}

routine addCorrespondenceBetweenPcmComponentAndJavaPackage(pcm::RepositoryComponent pcmComponent, java::Package javaPackage) {
	action {
		add correspondence between pcmComponent and javaPackage
	}
}


routine addCorrespondenceBetweenPcmComponentOrSystemAndJavaCompilationUnit(pcm::InterfaceProvidingRequiringEntity pcmComponentOrSystem, java::CompilationUnit compilationUnit) {
	action {
		add correspondence between pcmComponentOrSystem and compilationUnit
	}
}

reaction JavaPackageRenamed {
	after attribute replaced at java::Package[name]
	call {
		renameRepository(affectedEObject)
		renameSystem(affectedEObject)
		renameComponent(affectedEObject)
	}
}

routine renameRepository(java::Package javaPackage) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to javaPackage tagged with "package_root"
	}
	action {
		update pcmRepository {
			pcmRepository.entityName = javaPackage.name.toFirstUpper
		}
	}
}

routine renameSystem(java::Package javaPackage) {
	match {
		val pcmSystem = retrieve pcm::System corresponding to javaPackage tagged with "root_system"
	}
	action {
		update pcmSystem {
			pcmSystem.entityName = javaPackage.name.toFirstUpper
		}
	}
}

routine renameComponent(java::Package javaPackage) {
	match {
		val pcmComponent = retrieve pcm::RepositoryComponent corresponding to javaPackage
	}
	action {
		update pcmComponent {
			pcmComponent.entityName = javaPackage.name.toFirstUpper;
		}
	}
}


reaction JavaInterfaceRenamed {
	after attribute replaced at java::Interface[name]
	call renameInterface(affectedEObject)
}

routine renameInterface(java::Interface javaInterface) {
	match {
		val pcmInterface = retrieve pcm::OperationInterface corresponding to javaInterface}
	action {
		update pcmInterface {
			pcmInterface.entityName = javaInterface.name
		}
	}
}



//Class
reaction JavaClassRenamed {
	after attribute replaced at java::Class[name]
	call {
		renameComponentFromClass(affectedEObject)
		renameDataTypeFromClass(affectedEObject)
	}
}

routine renameComponentFromClass(java::Class javaClass) {
	match {
		val pcmComponent = retrieve pcm::RepositoryComponent corresponding to javaClass
	}
	action {
		update pcmComponent {
			var newName = javaClass.name.toFirstUpper
			if (newName.endsWith("Impl")) newName = newName.substring(0, newName.length - "Impl".length)
			pcmComponent.entityName = newName
		}
	}
}

routine renameDataTypeFromClass(java::Class javaClass) {
	match {
		val dataType = retrieve pcm::DataType corresponding to javaClass
	}
	action {
		update dataType {
			if(dataType instanceof Entity) { // primitive data types don't have names
				dataType.entityName = javaClass.name.toFirstUpper
			}
		}
	}
}





/**
 * User can choose if a composite or collection data type should be created.
 */
routine createDataType(java::Class javaClass, java::CompilationUnit compilationUnit) {
	action {
		call {
			val String userMsg = "Class " + javaClass.name +
						" has been created in the datatypes package. Please decide which kind of data type should be created."
			val String[] selections = #[Java2PcmUserSelection.SELECT_COMPOSITE_DATA_TYPE.message,
				Java2PcmUserSelection.SELECT_COLLECTION_DATA_TYPE.message,
				Java2PcmUserSelection.SELECT_NOTHING_DECIDE_LATER.message
			]
			val selected = userInteractor.singleSelectionDialogBuilder.message(userMsg).choices(selections)
				.windowModality(WindowModality.MODAL).startInteraction()
			switch(selected) {
				case Java2PcmUserSelection.SELECT_COMPOSITE_DATA_TYPE.selection: 
					createOrFindCompositeDataType(javaClass, compilationUnit)
				case Java2PcmUserSelection.SELECT_COLLECTION_DATA_TYPE.selection: 
					createOrFindCollectionDataType(javaClass, compilationUnit)
			}
		}
	}
}





routine createOrFindCompositeDataType(java::Class javaClass, java::CompilationUnit compilationUnit) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
	}
	action {
		call {
			val foundCompositeDataType = pcmRepository.dataTypes__Repository.filter(CompositeDataType)
				.filter[entityName.toFirstUpper == javaClass.name.toFirstUpper || javaClass.name === null && entityName == "aName"].claimNotMany
			if (foundCompositeDataType === null) {
				createCompositeDataType(javaClass, compilationUnit)
			} else {
				addDataTypeCorrespondence(javaClass, compilationUnit, foundCompositeDataType)
			}
		}
	}
}

routine createCompositeDataType(java::Class javaClass, java::CompilationUnit compilationUnit) {
	action {
		val pcmCompositeDataType = create pcm::CompositeDataType and initialize {
			pcmCompositeDataType.entityName = javaClass.name
		}
		add correspondence between pcmCompositeDataType and javaClass
		call {
			addDataTypeCorrespondence(javaClass, compilationUnit, pcmCompositeDataType)
			addDataTypeInRepository(pcmCompositeDataType)
		}
	}
}

routine createOrFindCollectionDataType(java::Class javaClass, java::CompilationUnit compilationUnit) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
	}
	action {
		call {
			val foundCollectionDataType = pcmRepository.dataTypes__Repository.filter(CollectionDataType)
				.filter[entityName.toFirstUpper == javaClass.name.toFirstUpper || javaClass.name === null && entityName == "aName"].claimNotMany
			if (foundCollectionDataType === null) {
				createCollectionDataType(javaClass, compilationUnit)
			} else {
				addDataTypeCorrespondence(javaClass, compilationUnit, foundCollectionDataType)
			}
		}
	}
}

routine createCollectionDataType(java::Class javaClass, java::CompilationUnit compilationUnit) {
	action {
		val pcmCollectionDataType = create pcm::CollectionDataType and initialize {
			pcmCollectionDataType.entityName = javaClass.name
		}
		call {
			addDataTypeCorrespondence(javaClass, compilationUnit, pcmCollectionDataType)
			addDataTypeInRepository(pcmCollectionDataType)
		}
	}
}

routine addDataTypeCorrespondence(java::Class javaClass, java::CompilationUnit compilationUnit, pcm::DataType dataType) {
	action {
		add correspondence between dataType and javaClass
		add correspondence between compilationUnit and javaClass
	}
}

routine addDataTypeInRepository(pcm::DataType pcmDataType) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
	}
	action {
		update pcmDataType {
			pcmDataType.repository__DataType = pcmRepository
		}
		update pcmRepository {
			pcmRepository.dataTypes__Repository += pcmDataType
		}
	}
}



//Other
/**
 * Creates datatypes and contracts package into given javaPackage after it was created.
 */
routine createJavaSubPackages(java::Package javaPackage) {
	match {
		val repository = retrieve pcm::Repository corresponding to javaPackage
	}
	action {
		call {
			createJavaPackage(repository, javaPackage, "datatypes", "datatypes");
			createJavaPackage(repository, javaPackage, "contracts", "contracts");
		}
	}
}	

/**
 * Create java package and tag it.
 */
routine createJavaPackage(EObject sourceElementMappedToPackage, java::Package parentPackage, String packageName, String newTag)	 { 
	match {
		require absence of java::Package corresponding to sourceElementMappedToPackage tagged with newTag
	} 
	action { // TODO FIXME find or create pattern
		val javaPackage = create java::Package and initialize {
			if (parentPackage !== null) {
				javaPackage.namespaces += parentPackage.namespaces;
				javaPackage.namespaces += parentPackage.name; 
			}
			javaPackage.name = packageName;
			persistProjectRelative(parentPackage, javaPackage, buildJavaFilePath(javaPackage));
		}
		add correspondence between javaPackage and ContainersPackage.Literals.PACKAGE
		add correspondence between javaPackage and sourceElementMappedToPackage
			tagged with newTag
	}
}

	