/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.splevo.diffing.emfcompare.kdm2javadiff.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.splevo.diffing.emfcompare.kdm2javadiff.util.KDM2JavaDiffAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class KDM2JavaDiffItemProviderAdapterFactory extends KDM2JavaDiffAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public KDM2JavaDiffItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.StatementOrderChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementOrderChangeItemProvider statementOrderChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.StatementOrderChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatementOrderChangeAdapter() {
		if (statementOrderChangeItemProvider == null) {
			statementOrderChangeItemProvider = new StatementOrderChangeItemProvider(this);
		}

		return statementOrderChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.StatementInsert} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementInsertItemProvider statementInsertItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.StatementInsert}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatementInsertAdapter() {
		if (statementInsertItemProvider == null) {
			statementInsertItemProvider = new StatementInsertItemProvider(this);
		}

		return statementInsertItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.StatementDelete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementDeleteItemProvider statementDeleteItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.StatementDelete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatementDeleteAdapter() {
		if (statementDeleteItemProvider == null) {
			statementDeleteItemProvider = new StatementDeleteItemProvider(this);
		}

		return statementDeleteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.StatementMove} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementMoveItemProvider statementMoveItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.StatementMove}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatementMoveAdapter() {
		if (statementMoveItemProvider == null) {
			statementMoveItemProvider = new StatementMoveItemProvider(this);
		}

		return statementMoveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.ClassInsert} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassInsertItemProvider classInsertItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.ClassInsert}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassInsertAdapter() {
		if (classInsertItemProvider == null) {
			classInsertItemProvider = new ClassInsertItemProvider(this);
		}

		return classInsertItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.ClassDelete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassDeleteItemProvider classDeleteItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.ClassDelete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassDeleteAdapter() {
		if (classDeleteItemProvider == null) {
			classDeleteItemProvider = new ClassDeleteItemProvider(this);
		}

		return classDeleteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.ClassModifierChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassModifierChangeItemProvider classModifierChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.ClassModifierChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassModifierChangeAdapter() {
		if (classModifierChangeItemProvider == null) {
			classModifierChangeItemProvider = new ClassModifierChangeItemProvider(this);
		}

		return classModifierChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.ImportInsert} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportInsertItemProvider importInsertItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.ImportInsert}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportInsertAdapter() {
		if (importInsertItemProvider == null) {
			importInsertItemProvider = new ImportInsertItemProvider(this);
		}

		return importInsertItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.ImportDelete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportDeleteItemProvider importDeleteItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.ImportDelete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportDeleteAdapter() {
		if (importDeleteItemProvider == null) {
			importDeleteItemProvider = new ImportDeleteItemProvider(this);
		}

		return importDeleteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.ClassChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassChangeItemProvider classChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.ClassChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassChangeAdapter() {
		if (classChangeItemProvider == null) {
			classChangeItemProvider = new ClassChangeItemProvider(this);
		}

		return classChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.MethodChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodChangeItemProvider methodChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.MethodChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodChangeAdapter() {
		if (methodChangeItemProvider == null) {
			methodChangeItemProvider = new MethodChangeItemProvider(this);
		}

		return methodChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.MethodModifierChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodModifierChangeItemProvider methodModifierChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.MethodModifierChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodModifierChangeAdapter() {
		if (methodModifierChangeItemProvider == null) {
			methodModifierChangeItemProvider = new MethodModifierChangeItemProvider(this);
		}

		return methodModifierChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.ReturnTypeChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReturnTypeChangeItemProvider returnTypeChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.ReturnTypeChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReturnTypeChangeAdapter() {
		if (returnTypeChangeItemProvider == null) {
			returnTypeChangeItemProvider = new ReturnTypeChangeItemProvider(this);
		}

		return returnTypeChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.MethodParameterChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodParameterChangeItemProvider methodParameterChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.MethodParameterChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodParameterChangeAdapter() {
		if (methodParameterChangeItemProvider == null) {
			methodParameterChangeItemProvider = new MethodParameterChangeItemProvider(this);
		}

		return methodParameterChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.MethodInsert} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodInsertItemProvider methodInsertItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.MethodInsert}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodInsertAdapter() {
		if (methodInsertItemProvider == null) {
			methodInsertItemProvider = new MethodInsertItemProvider(this);
		}

		return methodInsertItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.MethodDelete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodDeleteItemProvider methodDeleteItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.MethodDelete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodDeleteAdapter() {
		if (methodDeleteItemProvider == null) {
			methodDeleteItemProvider = new MethodDeleteItemProvider(this);
		}

		return methodDeleteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.splevo.diffing.emfcompare.kdm2javadiff.CompilationUnitChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompilationUnitChangeItemProvider compilationUnitChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.splevo.diffing.emfcompare.kdm2javadiff.CompilationUnitChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompilationUnitChangeAdapter() {
		if (compilationUnitChangeItemProvider == null) {
			compilationUnitChangeItemProvider = new CompilationUnitChangeItemProvider(this);
		}

		return compilationUnitChangeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (statementOrderChangeItemProvider != null) statementOrderChangeItemProvider.dispose();
		if (statementInsertItemProvider != null) statementInsertItemProvider.dispose();
		if (statementDeleteItemProvider != null) statementDeleteItemProvider.dispose();
		if (statementMoveItemProvider != null) statementMoveItemProvider.dispose();
		if (classInsertItemProvider != null) classInsertItemProvider.dispose();
		if (classDeleteItemProvider != null) classDeleteItemProvider.dispose();
		if (classModifierChangeItemProvider != null) classModifierChangeItemProvider.dispose();
		if (importInsertItemProvider != null) importInsertItemProvider.dispose();
		if (importDeleteItemProvider != null) importDeleteItemProvider.dispose();
		if (classChangeItemProvider != null) classChangeItemProvider.dispose();
		if (methodChangeItemProvider != null) methodChangeItemProvider.dispose();
		if (methodModifierChangeItemProvider != null) methodModifierChangeItemProvider.dispose();
		if (returnTypeChangeItemProvider != null) returnTypeChangeItemProvider.dispose();
		if (methodParameterChangeItemProvider != null) methodParameterChangeItemProvider.dispose();
		if (methodInsertItemProvider != null) methodInsertItemProvider.dispose();
		if (methodDeleteItemProvider != null) methodDeleteItemProvider.dispose();
		if (compilationUnitChangeItemProvider != null) compilationUnitChangeItemProvider.dispose();
	}

}
